<?php

namespace App\Models;

use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use DB;
use Laravel\Passport\HasApiTokens;
use App\Notifications\ResetPasswordNotification;

class User extends Authenticatable
{
    use Notifiable, HasApiTokens;

    const ROLE_USER = 'user';
    const ROLE_ADMIN = 'admin';

    protected $username = 'username';
    protected $hidden = ['password', 'remember_token'];
    protected $fillable = [
        'first_name',
        'last_name',
        'username',
        'email',
        'status',
        'group',
        'parent_id',
        'path',
    ];

    public function wallet()
    {
        return $this->hasMany('App\Models\Wallet');
    }

    public function operation()
    {
        return $this->hasMany('App\Models\Operation'); //relations to Operations table
    }

    public function userPlans()
    {
        return $this->hasMany('App\Models\UserPlan');
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        //adding path to user and generate referral link
        self::created(function($model){
            $inviter = DB::table('users')->where('id', '=', $model->parent_id)->first();

            if (!isset($inviter->path))
                $model->path = $model->id;
            else {
                $user_path[] = explode( '.', $inviter->path);
                if (count($user_path) > 3) {
                    $path = substr($inviter->path, strpos($inviter->path, '.') + 1);
                    $model->path = $path . '.' . $model->id;
                } else { $model->path = $inviter->path . '.' . $model->id; }
            }

            self::generateLink($model);

            //creating wallets for user
            self::createWalletsForUser($model->id);

            $model->save();
        });
    }

    public function sendPasswordResetNotification($token)
    {
        $this->notify(new ResetPasswordNotification($token));
    }

    public function findForPassport($identifier) {
        return $this->orWhere('username', $identifier)->first();
    }

    protected static function createWalletsForUser($user_id)
    {
        $payments = Payment::all();
        foreach ($payments as $payment)
        {
            $wallet = new Wallet();
            $wallet->user_id = $user_id;
            $wallet->payment_alias = $payment->alias;
            $wallet->balance = 0;
            $wallet->image = $payment->alias;
            $wallet->save();
        }
    }

    public static function generateLink($model)
    {
        //ref link
        $unique = false;
        $ref = str_random(4);

        while($unique == false) {
            $isUserExists = User::where('ref_link', '=', $ref)->exists() ? true : false;
            $unique = !$isUserExists;
            $ref = str_random(4);
        }
        $model->ref_link = $ref;
    }
}

